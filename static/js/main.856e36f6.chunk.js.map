{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loader.js","screens/MemesScreen.js","users.js","screens/LoginScreen.js","screens/DashboardScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Header","history","Navbar","bg","variant","expand","collapseOnSelect","Container","to","Brand","Toggle","Collapse","id","Nav","className","Link","localStorage","getItem","onClick","removeItem","document","location","href","Footer","Row","Col","Loader","Spinner","animation","role","MemesScreen","useState","memes","setMemes","hasTyped","setHasTyped","loading","setLoading","show","setShow","yourImg","setYourImg","topText","setTopText","topTextSize","setTopTextSize","topTextColor","setTopTextColor","bottomText","setBottomText","bottomTextSize","setBottomTextSize","bottomTextColor","setBottomTextColor","handleShow","e","val","target","src","useEffect","axios","get","then","response","data","Form","Control","type","placeholder","onChange","value","toLowerCase","tempMemes","filter","meme","name","includes","console","log","Button","selected","count","length","parseInt","Math","floor","random","push","Table","striped","bordered","hover","map","width","height","url","alt","Modal","onHide","closeButton","Title","Body","style","fontSize","color","onSubmit","preventDefault","Group","Label","Check","label","controlId","users","email","password","LoginScreen","setEmail","setPassword","error","setError","find","o","setItem","JSON","stringify","Alert","autofocus","disabled","DashboardScreen","user","parse","message","setMessage","activeMakeAList","setActiveMakeAList","activeShowMyList","setActiveShowMyList","selectedMemes","setSelectedMemes","myLists","setMyLists","checkBoxHandler","String","checked","dataVal","attributes","getNamedItem","record","index","findIndex","splice","slicedMemes","slice","userLists","userId","userHasLists","querySelectorAll","forEach","checkbox","alert","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mRA+CeA,EA1CA,SAAC,GAAgB,EAAdC,QAOd,OACI,iCACI,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,kBAAgB,EAA7D,SACI,eAACC,EAAA,EAAD,WACI,cAAC,gBAAD,CAAeC,GAAG,IAAlB,SACI,cAACN,EAAA,EAAOO,MAAR,4BAEJ,cAACP,EAAA,EAAOQ,OAAR,CAAe,gBAAc,qBAC7B,cAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,mBAApB,SACA,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACI,cAAC,gBAAD,CAAeN,GAAG,IAAlB,SACI,cAACK,EAAA,EAAIE,KAAL,qBAEFC,aAAaC,QAAQ,YACnB,qCACA,cAAC,gBAAD,CAAeT,GAAG,aAAlB,SACI,cAACK,EAAA,EAAIE,KAAL,0BAGJ,cAACF,EAAA,EAAIE,KAAL,CAAUG,QAxBnB,WACXF,aAAaG,WAAW,YACxBC,SAASC,SAASC,KAAO,UAsBL,uBAGA,cAAC,gBAAD,CAAed,GAAG,SAAlB,SACI,cAACK,EAAA,EAAIE,KAAL,mC,gBCpBjBQ,EAZA,WACX,OACI,iCACI,cAAChB,EAAA,EAAD,UACI,cAACiB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKX,UAAU,mBAAf,oD,mDCGLY,EARA,WACX,OACI,cAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACI,sBAAMf,UAAU,uB,iBCuQbgB,EAxQK,WAEhB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA8BR,mBAAS,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAA8BV,mBAAS,IAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KACA,EAAsCZ,mBAAS,MAA/C,mBAAOa,EAAP,KAAoBC,EAApB,KACA,EAAwCd,mBAAS,OAAjD,mBAAOe,EAAP,KAAqBC,EAArB,KACA,EAAoChB,mBAAS,IAA7C,mBAAOiB,EAAP,KAAmBC,EAAnB,KACA,EAA4ClB,mBAAS,MAArD,mBAAOmB,EAAP,KAAuBC,EAAvB,KACA,EAA8CpB,mBAAS,OAAvD,mBAAOqB,EAAP,KAAwBC,GAAxB,KAwDMC,GAAa,SAACC,GAChB,IAAMC,EAAMD,EAAEE,OAAOC,IACrBjB,EAAWe,GACXjB,GAAQ,IAgBZ,OANAoB,qBAAU,WACNC,IAAMC,IAAI,qCAAqCC,MAAK,SAACC,GACjD9B,EAAS8B,EAASC,KAAKA,KAAKhC,YAEjC,IAGC,qCACI,wCAEA,eAACR,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACwC,EAAA,EAAKC,QAAN,CAAcpD,UAAU,kBAAkBqD,KAAK,OAAOC,YAAY,mBAAmBC,SA5E7E,SAACd,GACrB,IAAMC,EAAMD,EAAEE,OAAOa,MAAMC,cAE3BlC,GAAW,GAEXuB,IAAMC,IAAI,qCAAqCC,MAAK,SAACC,GAEjD,GAAY,KAARP,EAAY,CACZ,IACMgB,EADgBT,EAASC,KAAKA,KAAKhC,MACTyC,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAKJ,cAAcK,SAASpB,MAClFqB,QAAQC,IAAIN,GACZvC,EAASuC,GACTrC,GAAY,GACZE,GAAW,QAEXJ,EAAS,IACTE,GAAY,GACZE,GAAW,WA6DX,cAACZ,EAAA,EAAD,UACI,cAACsD,EAAA,EAAD,CAAQ3E,QAAQ,UAAUc,QAvDhB,SAACqC,GACvBlB,GAAW,GAEXuB,IAAMC,IAAI,qCAAqCC,MAAK,SAACC,GAEjD,IAAMiB,EAAW,GAEXhB,EAAOD,EAASC,KAAKA,KAAKhC,MAE1BiD,EAAQjB,EAAKkB,OAIbV,EAAYR,EAFAmB,SAASC,KAAKC,MAAOD,KAAKE,SAAWL,KAIvDD,EAASO,KAAKf,GAEdrC,GAAY,GAEZF,EAAS+C,GAET3C,GAAW,OAkCH,8BAOND,GAAW,cAAC,EAAD,IAGPF,EACIF,EAAMkD,OAAS,EAEb,qCACA,eAACM,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACI,+BACI,wCACA,sCACA,4CAGR,gCACK3D,EAAM4D,KAAI,SAAClB,GAAD,OACP,+BACI,6BAAMA,EAAK9D,KACX,6BAAM8D,EAAKC,OACX,6BAAI,qBAAKkB,MAAM,MAAMC,OAAO,MAAMpC,IAAMgB,EAAKqB,IAAMC,IAAKtB,EAAKC,KAAM7D,UAAU,WAAWI,QAASoC,SAH5FoB,EAAK9D,YAS1B,eAACqF,EAAA,EAAD,CAAO3D,KAAMA,EAAM4D,OAnHnB,kBAAM3D,GAAQ,IAmHd,UACI,cAAC0D,EAAA,EAAMjG,OAAP,CAAcmG,aAAW,EAAzB,SACA,cAACF,EAAA,EAAMG,MAAP,0BAEA,eAACH,EAAA,EAAMI,KAAP,WAEI,sBAAKvF,UAAU,qBAAf,UACM4B,GAAW,qBAAK5B,UAAU,oBAAoBwF,MAAO,CAACC,SAAU3D,EAAY,KAAM4D,MAAO1D,GAA9E,SAAgGJ,IAC3G,qBAAKgB,IAAKlB,IACVQ,GAAc,qBAAKlC,UAAU,uBAAuBwF,MAAO,CAACC,SAAUrD,EAAe,KAAMsD,MAAOpD,GAApF,SAAyGJ,OAG7H,eAACiB,EAAA,EAAD,CAAMwC,SAlEZ,SAAClD,GACnBA,EAAEmD,kBAiEsB,UACI,cAACzC,EAAA,EAAK0C,MAAN,CAAY7F,UAAU,OAAtB,SACI,eAACU,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACwC,EAAA,EAAK2C,MAAN,wBACA,cAAC3C,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOE,SAAU,SAACd,GAAD,OAAOZ,EAAWY,EAAEE,OAAOa,QAAQF,YAAY,sBAEvF,eAAC3C,EAAA,EAAD,WACI,cAACwC,EAAA,EAAK2C,MAAN,yBACA,qBAAK9F,UAAU,OAAf,SACI,yBAAQuD,SAAU,SAACd,GAAD,OAAOV,EAAeU,EAAEE,OAAOa,QAAjD,UACI,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIR,cAACL,EAAA,EAAK2C,MAAN,qBACA,cAAC3C,EAAA,EAAK4C,MAAN,CACI1C,KAAK,QACL2C,MAAM,MACNnC,KAAK,eACL/D,GAAG,kBACH0D,MAAM,MACND,SAAU,SAACd,GAAD,OAAOR,EAAgBQ,EAAEE,OAAOa,UAE9C,cAACL,EAAA,EAAK4C,MAAN,CACI1C,KAAK,QACL2C,MAAM,OACNnC,KAAK,eACL/D,GAAG,mBACH0D,MAAM,OACND,SAAU,SAACd,GAAD,OAAOR,EAAgBQ,EAAEE,OAAOa,UAE9C,cAACL,EAAA,EAAK4C,MAAN,CACI1C,KAAK,QACL2C,MAAM,QACNnC,KAAK,eACL/D,GAAG,oBACH0D,MAAM,QACND,SAAU,SAACd,GAAD,OAAOR,EAAgBQ,EAAEE,OAAOa,kBAO1D,cAACL,EAAA,EAAK0C,MAAN,CAAY7F,UAAU,OAAOiG,UAAU,oBAAvC,SACI,eAACvF,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACwC,EAAA,EAAK2C,MAAN,2BACA,cAAC3C,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOE,SAAU,SAACd,GAAD,OAAON,EAAcM,EAAEE,OAAOa,QAAQF,YAAY,yBAE1F,cAAC3C,EAAA,EAAD,UACA,eAACA,EAAA,EAAD,WACI,cAACwC,EAAA,EAAK2C,MAAN,yBACI,qBAAK9F,UAAU,OAAf,SACI,yBAAQuD,SAAU,SAACd,GAAD,OAAOJ,EAAkBI,EAAEE,OAAOa,QAApD,UACI,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIR,cAACL,EAAA,EAAK2C,MAAN,qBACA,cAAC3C,EAAA,EAAK4C,MAAN,CACI1C,KAAK,QACL2C,MAAM,MACNnC,KAAK,kBACL/D,GAAG,qBACH0D,MAAM,MACND,SAAU,SAACd,GAAD,OAAOF,GAAmBE,EAAEE,OAAOa,UAEjD,cAACL,EAAA,EAAK4C,MAAN,CACI1C,KAAK,QACL2C,MAAM,OACNnC,KAAK,kBACL/D,GAAG,sBACH0D,MAAM,OACND,SAAU,SAACd,GAAD,OAAOF,GAAmBE,EAAEE,OAAOa,UAEjD,cAACL,EAAA,EAAK4C,MAAN,CACI1C,KAAK,QACL2C,MAAM,QACNnC,KAAK,kBACL/D,GAAG,uBACH0D,MAAM,QACND,SAAU,SAACd,GAAD,OAAOF,GAAmBE,EAAEE,OAAOa,oBAOjE,cAACS,EAAA,EAAD,CAAQ3E,QAAQ,UAAU+D,KAAK,SAA/B,+BAiBZ,gDAIP,6D,SCxPF6C,EAfD,CACZ,CACEpG,GAAI,EACJ+D,KAAM,cACNsC,MAAO,oBACPC,SAAU,UAEZ,CACEtG,GAAI,EACJ+D,KAAM,cACNsC,MAAO,oBACPC,SAAU,WCoDCC,EA1DK,SAAC,GAAiB,IAAflH,EAAc,EAAdA,QAEnB,EAA0B8B,mBAAS,IAAnC,mBAAOkF,EAAP,KAAcG,EAAd,KACA,EAAgCrF,mBAAS,IAAzC,mBAAOmF,EAAP,KAAiBG,EAAjB,KACA,EAA0BtF,mBAAS,IAAnC,mBAAOuF,EAAP,KAAcC,EAAd,KA+BA,OANA5D,qBAAU,WACF3C,aAAaC,QAAQ,aACrBhB,EAAQsF,KAAK,gBAElB,IAGC,mCACI,eAACtB,EAAA,EAAD,CAAMnD,UAAU,aAAa2F,SA3Bf,SAAClD,GACnBA,EAAEmD,iBAEF,IAKM3C,EAJkBiD,EAAMQ,MAAK,SAAAC,GAAC,OAAKA,EAAER,QAAUA,GAASQ,EAAEP,WAAaA,KAMzEnD,GACA/C,aAAa0G,QAAQ,WAAYC,KAAKC,UAAU7D,IAChD3C,SAASC,SAASC,KAAO,eAEzBuD,QAAQC,IAAI,SACZyC,EAAS,kCAYT,UACMD,GAAS,cAACO,EAAA,EAAD,CAAOzH,QAAQ,SAAf,SAA0BkH,IAErC,eAACrD,EAAA,EAAK0C,MAAN,CAAY7F,UAAU,OAAOiG,UAAU,iBAAvC,UACI,cAAC9C,EAAA,EAAK2C,MAAN,oBACA,cAAC3C,EAAA,EAAKC,QAAN,CAAc4D,WAAS,EAAC3D,KAAK,QAAQG,MAAO2C,EAAO7C,YAAY,mBAAmBC,SAAU,SAACd,GAAD,OAAO6D,EAAS7D,EAAEE,OAAOa,aAGzH,eAACL,EAAA,EAAK0C,MAAN,CAAY7F,UAAU,OAAOiG,UAAU,oBAAvC,UACI,cAAC9C,EAAA,EAAK2C,MAAN,uBACA,cAAC3C,EAAA,EAAKC,QAAN,CAAcC,KAAK,WAAWG,MAAO4C,EAAU9C,YAAY,iBAAiBC,SAAU,SAACd,GAAD,OAAO8D,EAAY9D,EAAEE,OAAOa,aAGtH,cAACS,EAAA,EAAD,CAAQ3E,QAAQ,UAAU+D,KAAK,SAAS4D,WA3CzCd,EAAM/B,OAAS,GAAKgC,EAAShC,OAAS,GA2CrC,yB,QC2KD8C,EA3NS,SAAC,GAAiB,IAAf/H,EAAc,EAAdA,QAGjBgI,EAAON,KAAKO,MAAMlH,aAAaC,QAAQ,aAE7C,EAA8Bc,mBAAS,IAAvC,mBAAOoG,EAAP,KAAgBC,EAAhB,KACA,EAA8CrG,oBAAS,GAAvD,mBAAOsG,EAAP,KAAwBC,EAAxB,KACA,EAAgDvG,oBAAS,GAAzD,mBAAOwG,EAAP,KAAyBC,EAAzB,KACA,EAA8BzG,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CF,mBAAS,IAAnD,mBAAO0G,EAAP,KAAsBC,EAAtB,KACA,EAA8B3G,mBAAS,IAAvC,mBAAO4G,EAAP,KAAgBC,EAAhB,KAsCMC,EAAkB,SAACtF,GACrB,IAAMC,EAAMsF,OAAOvF,EAAEE,OAAOa,OACtByE,EAAUxF,EAAEE,OAAOsF,QACnBC,EAAUrB,KAAKO,MAAM3E,EAAEE,OAAOwF,WAAWC,aAAa,cAAc5E,OACpE6E,EAASV,EAEf,GAAIM,EAEAI,EAAO5D,KAAKyD,OACT,CAEH,IAAMI,EAAQD,EAAOE,WAAU,SAAA5B,GAAC,OAAKA,EAAE7G,KAAO4C,KAC9C2F,EAAOG,OAAOF,EAAO,GAGzBV,EAAiBS,IAmErB,OAnBAxF,qBAAU,WAED3C,aAAaC,QAAQ,aACtBhB,EAAQsF,KAAK,UAIjBlD,GAAW,GAGXuB,IAAMC,IAAI,qCAAqCC,MAAK,SAACC,GACjD,IACMwF,EADgBxF,EAASC,KAAKA,KAAKhC,MACPwH,MAAM,EAAG,IAC3CvH,EAASsH,GACTlH,GAAW,QAGhB,IAGC,qCACI,sBAAKvB,UAAU,mBAAf,UACI,cAACiE,EAAA,EAAD,CAAQ3E,QAAUiI,EAAkB,UAAY,OAASnH,QAxHnD,SAACqC,GACfA,EAAEmD,iBACF4B,GAAmB,GACnBE,GAAoB,GACpBJ,EAAW,KAoHH,yBACA,cAACrD,EAAA,EAAD,CAAQ3E,QAAUmI,EAAmB,UAAY,OAASrH,QAjHnD,SAACqC,GAChBA,EAAEmD,iBAEF4B,GAAmB,GACnBE,GAAoB,GACpBJ,EAAW,IAGX,IAEMqB,GAFe9B,KAAKO,MAAMlH,aAAaC,QAAQ,aAAe,IAErCuG,MAAK,SAAAC,GAAC,OAAKA,EAAEiC,SAAWzB,EAAKrH,MAGxDgI,EADAa,EACWA,EAAUd,QAEV,KAkGP,6BAGDvG,GAAW,cAAC,EAAD,IAGRJ,EAAMkD,OAAS,EACb,qCACEmD,GACE,sBAAKvH,UAAU,kBAAf,UACI,cAACiE,EAAA,EAAD,CAAQ3E,QAAQ,SAASc,QAtG3B,SAACqC,GACnBA,EAAEmD,iBACF4B,GAAmB,IAoGC,oBACA,cAACvD,EAAA,EAAD,CAAQ3E,QAAQ,OAAOc,QA9E3B,SAACqC,GACjBA,EAAEmD,iBAEF,IAAMyC,EAASxB,KAAKO,MAAMlH,aAAaC,QAAQ,aAAe,GAG9D,GAA4B,GAAxBwH,EAAcvD,OAAlB,CAMA,IAEyB,EAFnByE,EAAeR,EAAOE,WAAU,SAAA5B,GAAC,OAAKA,EAAEiC,SAAWzB,EAAKrH,MAE9D,IAAsB,IAAlB+I,EAEA9E,QAAQC,IAAI,kBACZ,EAAAqE,EAAOQ,GAAchB,SAAQpD,KAA7B,oBAAqCkD,SAGrC5D,QAAQC,IAAI,qBACZqE,EAAO5D,KAAK,CAAEmE,OAAQzB,EAAKrH,GAAI+H,QAASF,IAI5CzH,aAAa0G,QAAQ,UAAWC,KAAKC,UAAWuB,IAGhDf,EAAW,uBAGQhH,SAASwI,iBAAiB,wBAElCC,SAAQ,SAAAC,GACfA,EAASf,SAAU,KAMvBL,EAAiB,SAjCbqB,MAAM,sCAuEU,qBAIN5B,GAAW,cAACN,EAAA,EAAD,CAAOzH,QAAQ,UAAf,SAA0B+H,IAErCE,GACE,eAAC7C,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACI,+BACM0C,GAAmB,sCACrB,wCACA,sCACA,4CAGR,gCACKrG,EAAM4D,KAAI,SAAClB,GAAD,OACP,+BACM2D,GACF,6BACI,uBAAOlE,KAAK,WACR,aAAasE,EAAcjB,MAAM,SAAAC,GAAC,OAAIA,EAAE7G,KAAO8D,EAAK9D,MAAO,MAAQ,KACnE+D,KAAK,gBACL,aAAYgD,KAAKC,UAAUlD,GAC3BJ,MAAOI,EAAK9D,GACZyD,SAAUwE,MAGlB,6BAAMnE,EAAK9D,KACX,6BAAM8D,EAAKC,OACX,6BAAI,qBAAKkB,MAAM,MAAMC,OAAO,MAAMpC,IAAMgB,EAAKqB,IAAMC,IAAKtB,EAAKC,KAAM7D,UAAU,iBAbxE4D,EAAK9D,YAoB3B2H,EACEI,EAAQzD,OAAS,EACd,eAACM,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACI,+BACI,wCACA,sCACA,4CAGR,gCACKgD,EAAQ/C,KAAI,SAAClB,GAAD,OACT,+BACI,6BAAMA,EAAK9D,KACX,6BAAM8D,EAAKC,OACX,6BAAI,qBAAKkB,MAAM,MAAMC,OAAO,MAAMpC,IAAMgB,EAAKqB,IAAMC,IAAKtB,EAAKC,KAAM7D,UAAU,iBAHxE4D,EAAK9D,YAS1B,mBAAGE,UAAU,cAAb,6BAGJ,gCAIJ,oDClMLkJ,MAhBf,WACE,OACE,eAAC,gBAAD,WACE,cAAC,EAAD,IACA,sBAAMlJ,UAAU,OAAhB,SACE,eAACP,EAAA,EAAD,WACE,cAAC,IAAD,CAAO0J,KAAK,aAAaC,UAAWlC,IACpC,cAAC,IAAD,CAAOiC,KAAK,SAASC,UAAW/C,IAChC,cAAC,IAAD,CAAO8C,KAAK,IAAIC,UAAWpI,EAAaqI,OAAK,SAGjD,cAAC,EAAD,QCRSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxG,MAAK,YAAkD,IAA/CyG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1J,SAAS2J,eAAe,SAM1BX,M","file":"static/js/main.856e36f6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { Navbar, Nav, Container } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\nconst Header = ({ history }) => {\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('userInfo')\r\n        document.location.href = '/login'\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar bg='dark' variant='dark' expand='lg' collapseOnSelect>\r\n                <Container>\r\n                    <LinkContainer to='/'>\r\n                        <Navbar.Brand>React Memes</Navbar.Brand>\r\n                    </LinkContainer>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"me-auto\">\r\n                        <LinkContainer to='/'>\r\n                            <Nav.Link>Home</Nav.Link>\r\n                        </LinkContainer>\r\n                        { localStorage.getItem('userInfo') ? (\r\n                            <>  \r\n                            <LinkContainer to='/dashboard'>\r\n                                <Nav.Link>Dashboard</Nav.Link>\r\n                            </LinkContainer>\r\n\r\n                            <Nav.Link onClick={logout}>Logout</Nav.Link>\r\n                            </>\r\n                        ) : (\r\n                            <LinkContainer to='/login'>\r\n                                <Nav.Link>Login</Nav.Link>\r\n                            </LinkContainer>\r\n                        ) }\r\n                        \r\n                    </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <Container>\r\n                <Row>\r\n                    <Col className='text-center py-3'>Copyright &copy; 2021 React Memes</Col>\r\n                </Row>\r\n            </Container>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"visually-hidden\"></span>\r\n        </Spinner>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Table, Button, Modal, Row, Col } from 'react-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport axios from 'axios'\r\n\r\nconst MemesScreen = () => {\r\n\r\n    const [memes, setMemes] = useState([])\r\n    const [hasTyped, setHasTyped] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n    const [yourImg, setYourImg] = useState('')\r\n    const [topText, setTopText] = useState('')\r\n    const [topTextSize, setTopTextSize] = useState('16')\r\n    const [topTextColor, setTopTextColor] = useState('red')\r\n    const [bottomText, setBottomText] = useState('')\r\n    const [bottomTextSize, setBottomTextSize] = useState('16')\r\n    const [bottomTextColor, setBottomTextColor] = useState('red')\r\n\r\n    const handleClose = () => setShow(false);\r\n    \r\n    // Search Handler\r\n    const onChangeHandler = (e) => {\r\n        const val = e.target.value.toLowerCase()\r\n\r\n        setLoading(true)\r\n\r\n        axios.get('https://api.imgflip.com/get_memes').then((response) => {\r\n\r\n            if (val !== '') {\r\n                const searchedMemes = response.data.data.memes\r\n                const tempMemes = searchedMemes.filter((meme) => meme.name.toLowerCase().includes(val))\r\n                console.log(tempMemes)\r\n                setMemes(tempMemes)\r\n                setHasTyped(true)\r\n                setLoading(false)\r\n            } else {\r\n                setMemes([]);\r\n                setHasTyped(false)\r\n                setLoading(false)\r\n            }\r\n            \r\n        });\r\n    }\r\n\r\n    // Random Pick Handler\r\n    const randomPickHandler = (e) => {\r\n        setLoading(true)\r\n\r\n        axios.get('https://api.imgflip.com/get_memes').then((response) => {\r\n\r\n            const selected = []\r\n\r\n            const data = response.data.data.memes\r\n\r\n            const count = data.length\r\n\r\n            const randomNum = parseInt(Math.floor((Math.random() * count)))\r\n\r\n            const tempMemes = data[randomNum]\r\n\r\n            selected.push(tempMemes)\r\n\r\n            setHasTyped(true)\r\n\r\n            setMemes(selected)\r\n\r\n            setLoading(false)\r\n            \r\n        });\r\n    }\r\n\r\n    // Image Popup Modal Handler\r\n    const handleShow = (e) => {\r\n        const val = e.target.src\r\n        setYourImg(val)\r\n        setShow(true)\r\n    }\r\n\r\n    // Submit handler\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        \r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        axios.get('https://api.imgflip.com/get_memes').then((response) => {\r\n            setMemes(response.data.data.memes);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <h1>Images</h1>\r\n\r\n            <Row>\r\n                <Col>\r\n                    <Form.Control className='searchMeme mb-3' type=\"text\" placeholder=\"Search images...\" onChange={onChangeHandler} />\r\n                </Col>\r\n                <Col>\r\n                    <Button variant=\"primary\" onClick={randomPickHandler}>\r\n                        Random Pick\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            \r\n\r\n            { loading && <Loader /> }\r\n\r\n            { \r\n                ( hasTyped ) ? (                     \r\n                    ( memes.length > 0 ) ? (\r\n                        \r\n                        <>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Sr no.</th>\r\n                                    <th>Name</th>\r\n                                    <th>Image</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {memes.map((meme) => (\r\n                                    <tr key={meme.id}>\r\n                                        <td>{ meme.id }</td>\r\n                                        <td>{ meme.name }</td>\r\n                                        <td><img width='300' height='300' src={ meme.url } alt={meme.name} className='meme-img' onClick={handleShow} /></td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                        \r\n                        <Modal show={show} onHide={handleClose}>\r\n                            <Modal.Header closeButton>\r\n                            <Modal.Title>Your Meme</Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                <div className='your-meme-img mb-3'>\r\n                                    { topText && <div className='meme-img-top-text' style={{fontSize: topTextSize+'px', color: topTextColor }}>{ topText }</div> }\r\n                                    { <img src={yourImg} /> }\r\n                                    { bottomText && <div className='meme-img-bottom-text' style={{fontSize: bottomTextSize+'px', color: bottomTextColor }}>{ bottomText }</div> }\r\n                                </div>\r\n\r\n                                <Form onSubmit={submitHandler}>\r\n                                    <Form.Group className=\"mb-3\">\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <Form.Label>Top Text:</Form.Label>\r\n                                                <Form.Control type=\"text\" onChange={(e) => setTopText(e.target.value)} placeholder=\"Enter top text\" />\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Form.Label>Font Size:</Form.Label>\r\n                                                <div className='mb-3'>\r\n                                                    <select onChange={(e) => setTopTextSize(e.target.value)}>\r\n                                                        <option value=\"16\">16</option>\r\n                                                        <option value=\"18\">18</option>\r\n                                                        <option value=\"20\">20</option>\r\n                                                        <option value=\"22\">22</option>\r\n                                                    </select>\r\n                                                </div>\r\n\r\n                                                <Form.Label>Color:</Form.Label>\r\n                                                <Form.Check\r\n                                                    type=\"radio\"\r\n                                                    label=\"Red\"\r\n                                                    name=\"topTextColor\"\r\n                                                    id=\"topTextColorRed\"\r\n                                                    value=\"red\"\r\n                                                    onChange={(e) => setTopTextColor(e.target.value)} \r\n                                                />\r\n                                                <Form.Check\r\n                                                    type=\"radio\"\r\n                                                    label=\"Blue\"\r\n                                                    name=\"topTextColor\"\r\n                                                    id=\"topTextColorBlue\"\r\n                                                    value=\"blue\"\r\n                                                    onChange={(e) => setTopTextColor(e.target.value)} \r\n                                                />\r\n                                                <Form.Check\r\n                                                    type=\"radio\"\r\n                                                    label=\"Green\"\r\n                                                    name=\"topTextColor\"\r\n                                                    id=\"topTextColorGreen\"\r\n                                                    value=\"green\"\r\n                                                    onChange={(e) => setTopTextColor(e.target.value)} \r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        \r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <Form.Label>Bottom Text:</Form.Label>\r\n                                                <Form.Control type=\"text\" onChange={(e) => setBottomText(e.target.value)} placeholder=\"Enter Bottom Text\" />\r\n                                            </Col>\r\n                                            <Col>\r\n                                            <Col>\r\n                                                <Form.Label>Font Size:</Form.Label>\r\n                                                    <div className='mb-3'>\r\n                                                        <select onChange={(e) => setBottomTextSize(e.target.value)}>\r\n                                                            <option value=\"16\">16</option>\r\n                                                            <option value=\"18\">18</option>\r\n                                                            <option value=\"20\">20</option>\r\n                                                            <option value=\"22\">22</option>\r\n                                                        </select>\r\n                                                    </div>\r\n\r\n                                                    <Form.Label>Color:</Form.Label>\r\n                                                    <Form.Check\r\n                                                        type=\"radio\"\r\n                                                        label=\"Red\"\r\n                                                        name=\"bottomTextColor\"\r\n                                                        id=\"bottomTextColorRed\"\r\n                                                        value=\"red\"\r\n                                                        onChange={(e) => setBottomTextColor(e.target.value)} \r\n                                                    />\r\n                                                    <Form.Check\r\n                                                        type=\"radio\"\r\n                                                        label=\"Blue\"\r\n                                                        name=\"bottomTextColor\"\r\n                                                        id=\"bottomTextColorBlue\"\r\n                                                        value=\"blue\"\r\n                                                        onChange={(e) => setBottomTextColor(e.target.value)} \r\n                                                    />\r\n                                                    <Form.Check\r\n                                                        type=\"radio\"\r\n                                                        label=\"Green\"\r\n                                                        name=\"bottomTextColor\"\r\n                                                        id=\"bottomTextColorGreen\"\r\n                                                        value=\"green\"\r\n                                                        onChange={(e) => setBottomTextColor(e.target.value)} \r\n                                                    />\r\n                                                </Col>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form.Group>\r\n\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Apply\r\n                                    </Button>\r\n                                </Form>\r\n                            </Modal.Body>\r\n                            {/* <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={handleClose}>\r\n                                Save Changes\r\n                            </Button>\r\n                            </Modal.Footer> */}\r\n                        </Modal>\r\n                        </>\r\n\r\n                    ) : (\r\n                        <p>No record found</p>\r\n                    )\r\n                )\r\n                :\r\n                (<p>Please type any keyword.</p>)\r\n             }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MemesScreen","const users = [\r\n  {\r\n    id: 1,\r\n    name: 'Nomar Ramon',\r\n    email: 'nomar@example.com',\r\n    password: '123456'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ramon Nomar',\r\n    email: 'ramon@example.com',\r\n    password: '123456',\r\n  }\r\n]\r\n\r\nexport default users","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Alert } from 'react-bootstrap'\r\nimport users from '../users'\r\n\r\nconst LoginScreen = ({ history }) => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const validateForm = () => {\r\n        return email.length > 0 && password.length > 0;\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        const login = (loginEmail, loginPassword) => {\r\n            const isUserValid = users.find(o => (o.email === email && o.password === password));\r\n            return isUserValid\r\n        }\r\n\r\n        const response = login(email, password)\r\n\r\n        if (response) {\r\n            localStorage.setItem('userInfo', JSON.stringify(response))\r\n            document.location.href = '/dashboard'\r\n        } else {\r\n            console.log('error')\r\n            setError('Incorrect email or password.')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('userInfo')) {\r\n            history.push('/dashboard')\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Form className='login-form' onSubmit={submitHandler}>\r\n                { error && <Alert variant='danger'>{ error }</Alert> }\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control autofocus type=\"email\" value={email} placeholder=\"Enter your email\" onChange={(e) => setEmail(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\" value={password} placeholder=\"Enter Password\" onChange={(e) => setPassword(e.target.value)} />\r\n                </Form.Group>\r\n                \r\n                <Button variant=\"primary\" type=\"submit\" disabled={!validateForm()}>\r\n                    Login\r\n                </Button>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Alert, Table, Modal } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Loader from '../components/Loader';\r\nimport axios from 'axios';\r\n\r\nconst DashboardScreen = ({ history }) => {\r\n\r\n    // Get Logged In User\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"))\r\n\r\n    const [message, setMessage] = useState('')\r\n    const [activeMakeAList, setActiveMakeAList] = useState(false)\r\n    const [activeShowMyList, setActiveShowMyList] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [memes, setMemes] = useState([])\r\n    const [selectedMemes, setSelectedMemes] = useState([])\r\n    const [myLists, setMyLists] = useState([])\r\n\r\n    // Make A List Handler\r\n    const makeAList = (e) => {\r\n        e.preventDefault()\r\n        setActiveMakeAList(true)\r\n        setActiveShowMyList(false)\r\n        setMessage('')\r\n    }\r\n\r\n    // Show My List Handler\r\n    const showMyList = (e) => {\r\n        e.preventDefault()\r\n        \r\n        setActiveMakeAList(false)\r\n        setActiveShowMyList(true)\r\n        setMessage('')\r\n\r\n        // Get Record By ID\r\n        const mySavedLists = JSON.parse(localStorage.getItem(\"myLists\")) || []\r\n\r\n        const userLists = mySavedLists.find(o => (o.userId === user.id))\r\n\r\n        if (userLists) {\r\n            setMyLists(userLists.myLists)\r\n        } else {\r\n            setMyLists([])\r\n        }\r\n        \r\n    }\r\n\r\n    // Cancel Handler\r\n    const cancelHandler = (e) => {\r\n        e.preventDefault()\r\n        setActiveMakeAList(false)\r\n    }\r\n\r\n    // Checkbox Handler\r\n    const checkBoxHandler = (e) => {\r\n        const val = String(e.target.value)\r\n        const checked = e.target.checked\r\n        const dataVal = JSON.parse(e.target.attributes.getNamedItem(\"data-value\").value)\r\n        const record = selectedMemes\r\n\r\n        if (checked) {\r\n            // Add To Record\r\n            record.push(dataVal)\r\n        } else {\r\n            // // Remove record if exists\r\n            const index = record.findIndex(o => (o.id === val))\r\n            record.splice(index, 1)\r\n        }\r\n\r\n        setSelectedMemes(record)\r\n    }\r\n\r\n    // Save Handler\r\n    const saveHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        const record = JSON.parse(localStorage.getItem(\"myLists\")) || []\r\n\r\n        // Check if there are selected checkbox\r\n        if (selectedMemes.length == 0) {\r\n            alert('Please select at least one image.')\r\n            return\r\n        }\r\n\r\n        // Check if there are existing records from this user\r\n        const userHasLists = record.findIndex(o => (o.userId === user.id))\r\n\r\n        if (userHasLists !== -1) {\r\n            // Update record\r\n            console.log('update record')\r\n            record[userHasLists].myLists.push(...selectedMemes)\r\n        } else {\r\n            // Insert New Record\r\n            console.log('insert new record')\r\n            record.push({ userId: user.id, myLists: selectedMemes })\r\n        }\r\n\r\n        // add to localstorage\r\n        localStorage.setItem('myLists', JSON.stringify( record ))\r\n\r\n        // Show success message\r\n        setMessage('Added to your list.')\r\n\r\n        // Reset Checkbox\r\n        const checkboxes = document.querySelectorAll('input[type=checkbox]')\r\n\r\n        checkboxes.forEach(checkbox => {\r\n            checkbox.checked = false\r\n        });\r\n        \r\n        // checkboxes.setAttribute('checked', false)\r\n\r\n        // Reset selected memes\r\n        setSelectedMemes([])\r\n    }\r\n\r\n    // Use Effect Handler\r\n    useEffect(() => {\r\n        // prevent unauthorized user\r\n        if (!localStorage.getItem('userInfo')) {\r\n            history.push('/login');\r\n        }\r\n\r\n        // Show loader\r\n        setLoading(true)\r\n\r\n        // Get 15 records only\r\n        axios.get('https://api.imgflip.com/get_memes').then((response) => {\r\n            const searchedMemes = response.data.data.memes\r\n            const slicedMemes = searchedMemes.slice(0, 15);\r\n            setMemes(slicedMemes)\r\n            setLoading(false)\r\n        });\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className='text-center mb-4'>\r\n                <Button variant={ activeMakeAList ? 'primary' : 'dark' } onClick={makeAList}>Make a List</Button>\r\n                <Button variant={ activeShowMyList ? 'primary' : 'dark' } onClick={showMyList}>Show My List</Button>\r\n             </div>\r\n\r\n             { loading && <Loader /> }\r\n\r\n             {           \r\n                ( memes.length > 0 ) ? (\r\n                    <>\r\n                    { activeMakeAList &&\r\n                        <div className=\"text-right mb-3\">\r\n                            <Button variant=\"danger\" onClick={cancelHandler}>Cancel</Button> \r\n                            <Button variant=\"info\" onClick={saveHandler}>Save</Button>\r\n                        </div>\r\n                    }\r\n\r\n                    { message && <Alert variant='success'>{message}</Alert> }\r\n\r\n                    { activeMakeAList &&\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    { activeMakeAList && <th>&nbsp;</th> }\r\n                                    <th>Sr no.</th>\r\n                                    <th>Name</th>\r\n                                    <th>Image</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {memes.map((meme) => (\r\n                                    <tr key={meme.id}>\r\n                                        { activeMakeAList && \r\n                                        <td>\r\n                                            <input type=\"checkbox\"\r\n                                                data-exist={ selectedMemes.find( o => o.id === meme.id ) ? 'yes' : 'no' }\r\n                                                name='make-a-list[]' \r\n                                                data-value={JSON.stringify(meme)} \r\n                                                value={meme.id} \r\n                                                onChange={checkBoxHandler} \r\n                                            />\r\n                                        </td> }\r\n                                        <td>{ meme.id }</td>\r\n                                        <td>{ meme.name }</td>\r\n                                        <td><img width='300' height='300' src={ meme.url } alt={meme.name} className='meme-img' /></td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    }\r\n\r\n                    { (activeShowMyList) ? (\r\n                        (myLists.length > 0) ? (\r\n                            <Table striped bordered hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Sr no.</th>\r\n                                        <th>Name</th>\r\n                                        <th>Image</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {myLists.map((meme) => (\r\n                                        <tr key={meme.id}>\r\n                                            <td>{ meme.id }</td>\r\n                                            <td>{ meme.name }</td>\r\n                                            <td><img width='300' height='300' src={ meme.url } alt={meme.name} className='meme-img' /></td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        ) : (\r\n                            <p className='text-center'>No saved lists.</p>\r\n                        )\r\n                        \r\n                    ) : <></>\r\n                    }\r\n                    </>\r\n                ) : (\r\n                    <p>No record found</p>\r\n                )\r\n             }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DashboardScreen\r\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport { Container } from 'react-bootstrap'\nimport MemesScreen from \"./screens/MemesScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport DashboardScreen from \"./screens/DashboardScreen\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <main className='py-3'>\n        <Container>\n          <Route path='/dashboard' component={DashboardScreen} />\n          <Route path='/login' component={LoginScreen} />\n          <Route path='/' component={MemesScreen} exact />\n        </Container>\n      </main>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}